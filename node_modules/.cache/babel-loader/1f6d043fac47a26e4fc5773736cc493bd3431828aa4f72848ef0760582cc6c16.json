{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport const uploadImagesToV2 = async () => {\n  try {\n    console.log('Fetching images from:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Request failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to get images: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('API response:', data);\n    return data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async images => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n  return response.json();\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","uploadImagesToV2","console","log","response","fetch","method","headers","ok","errorText","text","error","status","Error","data","json","uploadImages","images","formData","FormData","forEach","image","index","append","body","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport interface ImageResponse {\n  story_id: string;\n  image_path: string;\n  image_number: number;\n  created_at: string;\n  description: string;\n}\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\nexport const uploadImagesToV2 = async (): Promise<ImageResponse[]> => {\n  try {\n    console.log('Fetching images from:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Request failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to get images: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('API response:', data);\n    return data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (images: File[]): Promise<Story> => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n\n  return response.json();\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,6BAA6B,CAAC,CAAC;;AAmBpD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAsC;EACpE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,GAAGH,YAAY,aAAa,CAAC;IAClE,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAa,EAAE;MACzDM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvCR,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEP,QAAQ,CAACQ,MAAM,CAAC;MAC7DV,OAAO,CAACS,KAAK,CAAC,iBAAiB,EAAEF,SAAS,CAAC;MAC3C,MAAM,IAAII,KAAK,CAAC,yBAAyBT,QAAQ,CAACQ,MAAM,IAAIH,SAAS,EAAE,CAAC;IAC1E;IAEA,MAAMK,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCb,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEW,IAAI,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,YAAY,GAAG,MAAOC,MAAc,IAAqB;EACpE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BF,MAAM,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC/BJ,QAAQ,CAACK,MAAM,CAAC,QAAQD,KAAK,EAAE,EAAED,KAAK,CAAC;EACzC,CAAC,CAAC;EAEF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,qBAAqB,EAAE;IACjEM,MAAM,EAAE,MAAM;IACdkB,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACd,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOT,QAAQ,CAACW,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,cAAc,CAAC;EAE3D,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOT,QAAQ,CAACW,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMW,WAAW,GAAG,MAAOC,OAAe,IAAoB;EACnE,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,gBAAgB2B,OAAO,EAAE,EAAE;IACrErB,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}