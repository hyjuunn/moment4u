{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport const uploadImagesToV2 = async images => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`file`, image);\n  });\n  try {\n    console.log('Sending request to:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json'\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async images => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n  return response.json();\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","uploadImagesToV2","images","length","Error","formData","FormData","forEach","image","index","append","console","log","response","fetch","method","headers","body","ok","errorText","text","error","status","data","json","uploadImages","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport interface ImageResponse {\n  story_id: string;\n  image_path: string;\n  image_number: number;\n  created_at: string;\n  description: string;\n}\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\nexport const uploadImagesToV2 = async (images: File[]): Promise<ImageResponse[]> => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`file`, image);\n  });\n\n  try {\n    console.log('Sending request to:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (images: File[]): Promise<Story> => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n\n  return response.json();\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}