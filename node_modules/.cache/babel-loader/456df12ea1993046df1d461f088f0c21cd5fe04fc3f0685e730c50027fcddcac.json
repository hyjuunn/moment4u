{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000';\nexport const uploadImages = async files => {\n  if (!files.length) {\n    throw new Error('No files selected');\n  }\n  if (files.length > 4) {\n    throw new Error('Maximum 4 images allowed');\n  }\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('files', file);\n  });\n  const response = await fetch(`${API_BASE_URL}/upload`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to upload images');\n  }\n  return response.json();\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","uploadImages","files","length","Error","formData","FormData","forEach","file","append","response","fetch","method","body","ok","error","json","detail","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000';\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\ninterface UploadResponse {\n  story_id: string;\n  image_urls: string[];\n  image_count: number;\n}\n\nexport const uploadImages = async (files: File[]): Promise<UploadResponse> => {\n  if (!files.length) {\n    throw new Error('No files selected');\n  }\n\n  if (files.length > 4) {\n    throw new Error('Maximum 4 images allowed');\n  }\n\n  const formData = new FormData();\n  files.forEach((file) => {\n    formData.append('files', file);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/upload`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to upload images');\n  }\n\n  return response.json();\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,6BAA6B;AAiBlD,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAa,IAA8B;EAC5E,IAAI,CAACA,KAAK,CAACC,MAAM,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,IAAIF,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BJ,KAAK,CAACK,OAAO,CAAEC,IAAI,IAAK;IACtBH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC;EAChC,CAAC,CAAC;EAEF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,SAAS,EAAE;IACrDY,MAAM,EAAE,MAAM;IACdC,IAAI,EAAER;EACR,CAAC,CAAC;EAEF,IAAI,CAACK,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIZ,KAAK,CAACW,KAAK,CAACE,MAAM,IAAI,yBAAyB,CAAC;EAC5D;EAEA,OAAOP,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,cAAc,CAAC;EAE3D,IAAI,CAACU,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOM,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOC,OAAe,IAAoB;EACnE,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,gBAAgBoB,OAAO,EAAE,EAAE;IACrER,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}