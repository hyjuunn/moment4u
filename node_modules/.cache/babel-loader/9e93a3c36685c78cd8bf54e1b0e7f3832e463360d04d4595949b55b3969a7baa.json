{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport const uploadImagesToV2 = async images => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n  const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images');\n  }\n  return response.json();\n};\nexport const uploadImages = async images => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n  return response.json();\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","uploadImagesToV2","images","length","Error","formData","FormData","forEach","image","index","append","response","fetch","method","body","ok","json","uploadImages","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport interface ImageResponse {\n  story_id: string;\n  image_path: string;\n  image_number: number;\n  created_at: string;\n  description: string;\n}\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\nexport const uploadImagesToV2 = async (images: File[]): Promise<ImageResponse[]> => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images');\n  }\n\n  return response.json();\n};\n\nexport const uploadImages = async (images: File[]): Promise<Story> => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n\n  return response.json();\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,6BAA6B,CAAC,CAAC;;AAmBpD,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,MAAc,IAA+B;EAClF,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BJ,MAAM,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC/BJ,QAAQ,CAACK,MAAM,CAAC,QAAQD,KAAK,EAAE,EAAED,KAAK,CAAC;EACzC,CAAC,CAAC;EAEF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,aAAa,EAAE;IACzDa,MAAM,EAAE,MAAM;IACdC,IAAI,EAAET;EACR,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOO,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOf,MAAc,IAAqB;EACpE,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BJ,MAAM,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC/BJ,QAAQ,CAACK,MAAM,CAAC,QAAQD,KAAK,EAAE,EAAED,KAAK,CAAC;EACzC,CAAC,CAAC;EAEF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,qBAAqB,EAAE;IACjEa,MAAM,EAAE,MAAM;IACdC,IAAI,EAAET;EACR,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOO,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,cAAc,CAAC;EAE3D,IAAI,CAACW,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOO,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOC,OAAe,IAAoB;EACnE,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,gBAAgBoB,OAAO,EAAE,EAAE;IACrEP,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}