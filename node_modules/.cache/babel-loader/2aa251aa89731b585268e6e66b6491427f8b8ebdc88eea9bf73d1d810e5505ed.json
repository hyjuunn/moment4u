{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport const analyzeImageWithBlip = async imageUrl => {\n  try {\n    console.log('\\n--- BLIP Analysis Start ---');\n    console.log('Analyzing image URL:', imageUrl);\n    const response = await fetch(`${API_BASE_URL}/api/v1/blip/analyze?image_url=${encodeURIComponent(imageUrl)}`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('BLIP analysis failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to analyze image: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('BLIP API Response:', {\n      status: response.status,\n      data: data\n    });\n    console.log('--- BLIP Analysis End ---\\n');\n    return data;\n  } catch (error) {\n    console.error('BLIP analysis error:', error);\n    throw error;\n  }\n};\nexport const analyzeImagesSequentially = async images => {\n  try {\n    console.log('\\n=== Starting Sequential Image Analysis ===');\n    console.log('Processing', images.length, 'images');\n    const sortedImages = [...images].sort((a, b) => a.image_number - b.image_number);\n    console.log('Images sorted by number:', sortedImages.map(img => ({\n      number: img.image_number,\n      path: img.image_path\n    })));\n    const descriptions = [];\n    for (let i = 0; i < sortedImages.length; i++) {\n      const image = sortedImages[i];\n      console.log(`\\nProcessing image ${i + 1}/${sortedImages.length}`);\n      const description = await analyzeImageWithBlip(image.image_path);\n      console.log(`Description for image ${i + 1}:`, description);\n      descriptions.push(`${i + 1}. ${description}`);\n    }\n    const finalResult = descriptions.join(' | ');\n    console.log('\\nFinal combined description:', finalResult);\n    console.log('=== Sequential Image Analysis Complete ===\\n');\n    return finalResult;\n  } catch (error) {\n    console.error('Sequential analysis error:', error);\n    throw error;\n  }\n};\nexport const getImages = async () => {\n  try {\n    console.log('Fetching images from:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Request failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to get images: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('GET response:', data);\n    return data;\n  } catch (error) {\n    console.error('GET error:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async images => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n  const formData = new FormData();\n  images.forEach(image => {\n    formData.append('files', image);\n  });\n  try {\n    console.log('Uploading images to:', `${API_BASE_URL}/v2/images/upload`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/upload`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json'\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","analyzeImageWithBlip","imageUrl","console","log","response","fetch","encodeURIComponent","method","headers","ok","errorText","text","error","status","Error","data","json","analyzeImagesSequentially","images","length","sortedImages","sort","a","b","image_number","map","img","number","path","image_path","descriptions","i","image","description","push","finalResult","join","getImages","uploadImages","formData","FormData","forEach","append","body","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport interface ImageResponse {\n  story_id: string;\n  image_path: string;\n  image_number: number;\n  created_at: string;\n  description: string;\n}\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\nexport const analyzeImageWithBlip = async (imageUrl: string): Promise<string> => {\n  try {\n    console.log('\\n--- BLIP Analysis Start ---');\n    console.log('Analyzing image URL:', imageUrl);\n    \n    const response = await fetch(`${API_BASE_URL}/api/v1/blip/analyze?image_url=${encodeURIComponent(imageUrl)}`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('BLIP analysis failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to analyze image: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('BLIP API Response:', {\n      status: response.status,\n      data: data\n    });\n    console.log('--- BLIP Analysis End ---\\n');\n    return data;\n  } catch (error) {\n    console.error('BLIP analysis error:', error);\n    throw error;\n  }\n};\n\nexport const analyzeImagesSequentially = async (images: ImageResponse[]): Promise<string> => {\n  try {\n    console.log('\\n=== Starting Sequential Image Analysis ===');\n    console.log('Processing', images.length, 'images');\n    \n    const sortedImages = [...images].sort((a, b) => a.image_number - b.image_number);\n    console.log('Images sorted by number:', sortedImages.map(img => ({\n      number: img.image_number,\n      path: img.image_path\n    })));\n    \n    const descriptions: string[] = [];\n\n    for (let i = 0; i < sortedImages.length; i++) {\n      const image = sortedImages[i];\n      console.log(`\\nProcessing image ${i + 1}/${sortedImages.length}`);\n      const description = await analyzeImageWithBlip(image.image_path);\n      console.log(`Description for image ${i + 1}:`, description);\n      descriptions.push(`${i + 1}. ${description}`);\n    }\n\n    const finalResult = descriptions.join(' | ');\n    console.log('\\nFinal combined description:', finalResult);\n    console.log('=== Sequential Image Analysis Complete ===\\n');\n    return finalResult;\n  } catch (error) {\n    console.error('Sequential analysis error:', error);\n    throw error;\n  }\n};\n\nexport const getImages = async (): Promise<ImageResponse[]> => {\n  try {\n    console.log('Fetching images from:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Request failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to get images: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('GET response:', data);\n    return data;\n  } catch (error) {\n    console.error('GET error:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (images: File[]): Promise<ImageResponse[]> => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n\n  const formData = new FormData();\n  images.forEach((image) => {\n    formData.append('files', image);\n  });\n\n  try {\n    console.log('Uploading images to:', `${API_BASE_URL}/v2/images/upload`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/upload`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n      },\n      body: formData\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}