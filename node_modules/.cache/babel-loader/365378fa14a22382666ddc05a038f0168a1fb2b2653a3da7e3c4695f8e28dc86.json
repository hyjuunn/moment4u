{"ast":null,"code":"const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport const uploadImagesToV2 = async images => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n  const formData = new FormData();\n  images.forEach(image => {\n    formData.append('images', image);\n  });\n  try {\n    console.log('Sending request to:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async images => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n  return response.json();\n};\nexport const getAllStories = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n  return response.json();\n};\nexport const deleteStory = async storyId => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","uploadImagesToV2","images","length","Error","formData","FormData","forEach","image","append","console","log","response","fetch","method","headers","ok","errorText","text","error","status","data","json","uploadImages","index","body","getAllStories","deleteStory","storyId"],"sources":["/Users/hyunjunekim/Documents/GitHub/moment4u/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://googleml.kro.kr:8000'; // FastAPI server URL\n\nexport interface ImageResponse {\n  story_id: string;\n  image_path: string;\n  image_number: number;\n  created_at: string;\n  description: string;\n}\n\nexport interface Story {\n  id: string;\n  title: string;\n  content: string;\n  thumbnailUrl: string;\n  images: string[];\n  createdAt: string;\n}\n\nexport const uploadImagesToV2 = async (images: File[]): Promise<ImageResponse[]> => {\n  if (images.length > 4) {\n    throw new Error('Maximum 4 images can be uploaded at once');\n  }\n\n  const formData = new FormData();\n  images.forEach((image) => {\n    formData.append('images', image);\n  });\n\n  try {\n    console.log('Sending request to:', `${API_BASE_URL}/v2/images/`);\n    const response = await fetch(`${API_BASE_URL}/v2/images/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload failed with status:', response.status);\n      console.error('Error response:', errorText);\n      throw new Error(`Failed to upload images: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('Upload response:', data);\n    return data;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (images: File[]): Promise<Story> => {\n  const formData = new FormData();\n  images.forEach((image, index) => {\n    formData.append(`image${index}`, image);\n  });\n\n  const response = await fetch(`${API_BASE_URL}/api/stories/create`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images and generate story');\n  }\n\n  return response.json();\n};\n\nexport const getAllStories = async (): Promise<Story[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch stories');\n  }\n\n  return response.json();\n};\n\nexport const deleteStory = async (storyId: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/api/stories/${storyId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete story');\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,6BAA6B,CAAC,CAAC;;AAmBpD,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,MAAc,IAA+B;EAClF,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BJ,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;IACxBH,QAAQ,CAACI,MAAM,CAAC,QAAQ,EAAED,KAAK,CAAC;EAClC,CAAC,CAAC;EAEF,IAAI;IACFE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,GAAGX,YAAY,aAAa,CAAC;IAChE,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,aAAa,EAAE;MACzDc,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvCR,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEP,QAAQ,CAACQ,MAAM,CAAC;MAC5DV,OAAO,CAACS,KAAK,CAAC,iBAAiB,EAAEF,SAAS,CAAC;MAC3C,MAAM,IAAIb,KAAK,CAAC,4BAA4BQ,QAAQ,CAACQ,MAAM,IAAIH,SAAS,EAAE,CAAC;IAC7E;IAEA,MAAMI,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEU,IAAI,CAAC;IACrC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOrB,MAAc,IAAqB;EACpE,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BJ,MAAM,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEgB,KAAK,KAAK;IAC/BnB,QAAQ,CAACI,MAAM,CAAC,QAAQe,KAAK,EAAE,EAAEhB,KAAK,CAAC;EACzC,CAAC,CAAC;EAEF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,qBAAqB,EAAE;IACjEc,MAAM,EAAE,MAAM;IACdW,IAAI,EAAEpB;EACR,CAAC,CAAC;EAEF,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIZ,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOQ,QAAQ,CAACU,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,cAAc,CAAC;EAE3D,IAAI,CAACY,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIZ,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,OAAOQ,QAAQ,CAACU,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAOC,OAAe,IAAoB;EACnE,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,gBAAgB4B,OAAO,EAAE,EAAE;IACrEd,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIZ,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}